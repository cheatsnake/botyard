{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro","text":"<p>Botyard is a self-hosted platform that offers a comprehensive solution for the development, management, and interaction with chatbots.</p> <p>It provides a preconfigured backend server equipped with a user-friendly HTTP API, enabling easy platform management and chatbot development in any programming language.</p> <p>Additionally, it features a streamlined web client application designed for seamless interaction with pre-built bots.</p> <p></p>"},{"location":"#project-architecture","title":"Project architecture","text":"<p>Botyard architecture is pretty staightforward. It all revolves around only three main components: bots, users and chats.</p> <p></p> <p>User are the simplest of them all. This component is only responsible for user indetification in the system. It is so minimalistic that it contains only an identifier and a nickname.</p> <p>Bot is the most advanced component. Each bot is a small independent system, which implies the ability to handle messages from multiple users. Commands can be added to the bot, which can be used to describe its functionality as simply and concisely as possible. Since each bot can be developed and managed independently, each bot has an access key for this purpose. Finally, for efficient and fast processing of user messages, a webhook can be attached to each bot.</p> <p>Chat is the connecting link between the user and the bot. Chats contain messages that can be sent by both the user and the bot. Each message contains a body (text information). Additionally, you can attach files to each message.</p>"},{"location":"#what-is-it-good-for","title":"What is it good for?","text":"<p>Botyard is perfect as a transport layer for delivering data from server applications to end users. Thanks to this, you can save resources and not develop the UI (frontend) part of your application separately.</p> <p>For example, if you are developing applications based on artificial intelligence, in particular on Large Language Models (LLM), then interacting with them through bots is an extremely successful combination, which has already shown its power on the example of ChatGPT.</p> <p>If you are developing CLI applications, then this will also allow you to expand the potential of your applications by expanding their scope of use.</p>"},{"location":"#what-does-it-feel-like","title":"What does it feel like?","text":"<p>The concept of bots is not new and is used in many other systems. For example, Telegram messenger has a whole API for bots. Or, the popular platform for voice and video calls Discord also has an advanced chatbot system.</p> <p>Of course, it is not correct to say that Botyard can be a direct competitor among such giants, to put it mildly. Rather, it is an alternative that is much simpler and completely controlled by you.</p>"},{"location":"#what-are-the-main-benefits","title":"What are the main benefits?","text":"<ul> <li>Simplicity. No matter how much it has already been mentioned, but it really is.</li> <li>Fast and lightweight. The main part of the platform is written in Go - a fast, compiled and minimalistic programming language. The final binary file of the server weighs about 17 MB. And the initial start-up of the server allocates only about 1.2 MB of RAM.</li> <li>Open source. You can view the source code, offer your corrections and suggestions. Together we can make it better.</li> </ul>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#config-file","title":"Config file","text":"<p>The main configuration file called <code>botyard.config.json</code>. It located in the <code>config</code> folder and looks like this:</p> <pre><code>{\n    \"service\": {\n        \"name\": \"Service name\",\n        \"description\": \"Some info about your service.\",\n        \"avatar\": \"https://google.com/image.png\",\n        \"socials\": [\n            { \"title\": \"Website\", \"url\": \"https://example.com\" },\n            { \"title\": \"GitHub\", \"url\": \"https://github.com\" },\n            { \"title\": \"Discord\", \"url\": \"https://discord.com\" },\n            { \"title\": \"Twitter\", \"url\": \"https://twitter.com\" }\n        ]\n    },\n    \"limits\": {\n        \"user\": {\n            \"minNicknameLength\": 3,\n            \"maxNicknameLength\": 32,\n            \"authTokenLifetime\": 10080\n        },\n        \"message\": {\n            \"maxBodyLength\": 4096,\n            \"maxAttachedFiles\": 10\n        },\n        \"file\": {\n            \"maxImageSize\": 2097152,\n            \"maxAudioSize\": 5242880,\n            \"maxVideoSize\": 26214400,\n            \"maxFileSize\": 10485760\n        }\n    }\n}\n</code></pre> <p>Below is a brief description for each field:</p> <ul> <li>service - Basic information about your organization providing bots.</li> <li>service.name - Name of your organization.</li> <li>service.description - A brief description for your bots provided by your organization.</li> <li>service.avatar - Link to your organization's logo or avatar.</li> <li>service.social - Array of links to social networks and sites related to your organization.</li> <li>service.social.title - Name of the social network or website (can be any).</li> <li>service.social.url - Link to a social network profile or website.</li> <li>limits - Data about limits on the platform.</li> <li>limits.user - Data on limits that relate directly to users.</li> <li>limits.user.minNicknameLength - Minimum length for user nickname.</li> <li>limits.user.maxNicknameLength - Maximum length for user nickname.</li> <li>limits.user.authTokenLifetime - The lifetime (in minutes) of the user's authorization token. You can learn more about it here. By default, it is equal to 10080 minutes, which corresponds to 1 week.</li> <li>limits.message - Data on limits that relate directly to messages.</li> <li>limits.message.maxBodyLength - The maximum length of the text part of the message (in characters).</li> <li>limits.message.maxAttachedFiles - The maximum number of files that can be attached to a single message.</li> <li>limits.file - Limit data that relates directly to uploaded files.</li> <li>limits.file.maxImageSize - Maximum size (in bytes) for images. By default, the limit is 2 MB.</li> <li>limits.file.maxAudioSize - Maximum size (in bytes) for audios. By default, the limit is 5 MB.</li> <li>limits.file.maxVideoSize - Maximum size (in bytes) for videos. By default, the limit is 25 MB.</li> <li>limits.file.maxFileSize - Maximum size (in bytes) for all other file types. By default, the limit is 10 MB.</li> </ul>"},{"location":"configuration/#environment-variables","title":"Environment variables","text":"<p>An example of <code>.env</code> file with environment variables required for the platform is shown below:</p> <pre><code>ADMIN_SECRET_KEY=YOUR_SECRET_KEY\nJWT_SECRET_KEY=OTHER_SECRET_KEY\n</code></pre> <ul> <li>ADMIN_SECRET_KEY - It is a secret key for access to the admin functionality.</li> <li>JWT_SECRET_KEY - A random key required to sign JWT keys used to authorise users on the platform.</li> </ul> <p>Please do not specify keys that are too simple, it is not secure. Use random password generators to create strong keys.</p>"},{"location":"contribution/","title":"Contribution","text":"<p>Botyard is a open source, so anyone can contribute to the development of the project.</p> <p>If you have any suggestions, or you have found some kind of bugs, feel free to create an Issue on GitHub. If you have specific suggestions for making changes to the source code, you can create a Pull Request.</p> <p>Do you want to help, but you don't know how? We still have a really huge amount of work ahead of us, for example:</p> <ul> <li>Writing guides for various programming languages.</li> <li>Implementing multilingual support.</li> <li>Creating native clients for Android, iOS, macOS, Windows and Linux.</li> <li>Developing SDK libraries for convenient work with the platform API.</li> <li>Interesting examples of bots for our demo showcase.</li> <li>Connectors for file storages like Google Drive, AWS S3, Azure Storage, etc.</li> <li>Expanding the functionality of the platform (advanced authorization, message streaming, integration with other systems, etc.)</li> <li>Code refactoring, various optimizations and fixes.</li> </ul> <p>And a bunch of other things :D</p>"},{"location":"installation/","title":"Installation","text":"<p>To run Botyard on your machine, there are two ways: using Docker (recommended) or building it yourself using the Go compiler for server and Node.js with npm for web client.</p>"},{"location":"installation/#docker","title":"Docker","text":"<ol> <li> <p>Clone Botyard repository</p> <pre><code>git clone https://github.com/cheatsnake/botyard.git\n</code></pre> <pre><code>cd ./botyard\n</code></pre> </li> <li> <p>Setup environment variables</p> <p>Next you need an <code>.env</code> file with some secret keys. You can create it manually reading this, or use a prepared script that will generate it for you by the command below:</p> <pre><code>make init-env\n</code></pre> </li> <li> <p>Change the standard configuration (optional)</p> <p>You can modify <code>config/botyard.config.json</code> file to setting the necessary information about your project and limits.</p> <p>See full reference about config here.</p> </li> <li> <p>Build a docker image and start a new container</p> <pre><code>docker compose up -d\n</code></pre> </li> </ol> <p>And finally go to http://localhost:7007 to see the result.</p> <p>To stop the container, use this:</p> <pre><code>docker compose down\n</code></pre>"},{"location":"installation/#build-from-source","title":"Build from source","text":"<ol> <li> <p>Clone Botyard repository</p> <pre><code>git clone https://github.com/cheatsnake/botyard.git\n</code></pre> <pre><code>cd ./botyard\n</code></pre> </li> <li> <p>Build client &amp; server</p> <pre><code>make build\n</code></pre> </li> <li> <p>Setup environment variables</p> <p>Next you need an <code>.env</code> file with some secret keys. You can create it manually reading this, or use a prepared script that will generate it for you by the command below:</p> <pre><code>make init-env\n</code></pre> </li> <li> <p>Change the standard configuration (optional)</p> <p>You can modify <code>config/botyard.config.json</code> file to setting the necessary information about your project and limits.</p> <p>See full reference about config here.</p> </li> <li> <p>Run a compiled binary</p> <pre><code>./main\n</code></pre> </li> </ol> <p>And finally go to http://localhost:7007 to see the result.</p>"},{"location":"api/admin/","title":"Admin API","text":"<p>To manage bots, the platform provides a simple and convenient HTTP API for admins.</p>"},{"location":"api/admin/#authorization","title":"Authorization","text":"<p>To access the admin functionality, a secret key is required, which is stored on the server in a <code>ADMIN_SECRET_KEY</code> environment variable. All requests described below should be executed with the Authorization header:</p> <pre><code>Authorization: &lt;YOUR_ADMIN_SECRET_KEY&gt;\n</code></pre>"},{"location":"api/admin/#create-a-bot","title":"Create a bot","text":"<p>The following route with a body in JSON format is used to create a new bot:</p> <pre><code>POST /v1/admin-api/bot\n</code></pre> <pre><code>{\n    \"name\": \"Bot name\",\n    \"description\": \"Just some info about bot.\",\n    \"avatar\": \"https://google.com/image.png\"\n}\n</code></pre> Body parameter Description name <code>Required</code>  A name for the new bot. description <code>Required</code>  A brief description of what your bot will do. avatar <code>Optional</code>  Link to an image (avatar) for your bot. <p>As a result you will get response like this:</p> <pre><code>{\n    \"bot\": {\n        \"id\": \"01hc76p6ma76qfrs0bfr5x2pry\",\n        \"name\": \"Test bot\",\n        \"description\": \"Just testing bot.\",\n        \"avatar\": \"https://google.com/image.png\"\n    },\n    \"key\": \"01hc76p6ma76qfrs0bfr5x2pry:hNBKVJQLAcD2S7xJMnVSkzKkfi\"\n}\n</code></pre> <ul> <li><code>bot.id</code> a unique identifier that is required to perform other operations on this bot.</li> <li><code>key</code> is access key, which is required to control the new bot.</li> </ul>"},{"location":"api/admin/#delete-a-bot","title":"Delete a bot","text":"<p>To remove a bot uses the following request:</p> <pre><code>DELETE /v1/admin-api/bot/:id\n</code></pre>"},{"location":"api/admin/#get-a-bots-access-key","title":"Get a bot's access key","text":"<p>To get the bot access key, use:</p> <pre><code>GET /v1/admin-api/bot/:id/key\n</code></pre> <p>As a result you will get response like this:</p> <pre><code>{\n    \"key\": \"01hc76p6ma76qfrs0bfr5x2pry:hNBKVJQLAcD2S7xJMnVSkzKkfi\"\n}\n</code></pre>"},{"location":"api/admin/#refresh-a-bots-access-key","title":"Refresh a bot's access key","text":"<p>To recreate the access key and update its value, use:</p> <pre><code>PUT /v1/admin-api/bot/:id/key\n</code></pre> <p>As a result you will get response like this:</p> <pre><code>{\n    \"key\": \"01hc76p6ma76qfrs0bfr5x2pry:s0PWbovTQpmuCLKKaxuruOleaX\"\n}\n</code></pre>"},{"location":"api/admin/#reload-server-config","title":"Reload server config","text":"<p>To apply the changes made to config file without rebooting the server, use the following request:</p> <pre><code>PUT /v1/admin-api/config\n</code></pre>"},{"location":"api/bot/","title":"Bot API","text":"<p>This section describes the functionality of bots, which can be easily controlled using the HTTP API with almost any programming language.</p>"},{"location":"api/bot/#authorization","title":"Authorization","text":"<p>Bots can be managed independently, so a unique access key is provided to access each one. Therefore, each request below must be executed with a Authorization header with the value of the access key:</p> <pre><code>Authorization: &lt;BOT_ACCESS_KEY&gt;\n</code></pre>"},{"location":"api/bot/#get-bot","title":"Get bot","text":"<p>To get information about the current bot, use:</p> <pre><code>GET /v1/bot-api/bot\n</code></pre> <p>Response will be like this:</p> <pre><code>{\n    \"id\": \"01hc76p6ma76qfrs0bfr5x2pry\",\n    \"name\": \"Test bot\",\n    \"description\": \"Just testing bot.\",\n    \"avatar\": \"https://google.com/image.png\"\n}\n</code></pre>"},{"location":"api/bot/#edit-bot","title":"Edit bot","text":"<p>To edit bot info, use this request with JSON body:</p> <pre><code>PUT /v1/bot-api/bot\n</code></pre> <pre><code>{\n    \"name\": \"New bot name\",\n    \"description\": \"New description.\",\n    \"avatar\": \"https://google.com/new-avatar.jpeg\"\n}\n</code></pre> Body parameter Description name <code>Optional</code>  A name for the new bot. description <code>Optional</code>  A brief description of what your bot will do. avatar <code>Optional</code>  Link to an image (avatar) for your bot."},{"location":"api/bot/#add-bot-commands","title":"Add bot commands","text":"<p>This request adds new commands to the current bot:</p> <pre><code>POST /v1/bot-api/bot/commands\n</code></pre> <pre><code>[\n    {\n        \"alias\": \"start\",\n        \"description\": \"Start a new conversation.\"\n    },\n    {\n        \"alias\": \"help\",\n        \"description\": \"Show usage guide.\"\n    }\n]\n</code></pre> <p>Commands are an optional feature. Using commands, it is convenient to describe the functionality of the bot. Users seeing the list of available commands will be able to quickly understand how to interact with the bot. And developers will be able to easily write rules for processing user messages containing the described commands.</p>"},{"location":"api/bot/#get-bot-commands","title":"Get bot commands","text":"<p>Get a list of available commands of the current bot:</p> <pre><code>GET /v1/bot-api/bot/commands\n</code></pre> <p>Returned response:</p> <pre><code>[\n    {\n        \"id\": \"01hcjd34adz1va07vk97jfjmgq\",\n        \"alias\": \"start\",\n        \"description\": \"Start a new conversation.\"\n    },\n    {\n        \"id\": \"01hcjd34adz1va07vk99w3hzk3\",\n        \"alias\": \"help\",\n        \"description\": \"Show usage guide.\"\n    }\n]\n</code></pre>"},{"location":"api/bot/#delete-bot-command","title":"Delete bot command","text":"<p>Delete bot command by unique identifier:</p> <pre><code>DELETE /v1/bot-api/bot/command/:id\n</code></pre>"},{"location":"api/bot/#add-bot-webhook","title":"Add bot webhook","text":"<p>Connect the webhook to the current bot:</p> <pre><code>POST /v1/bot-api/bot/webhook\n</code></pre> <pre><code>{\n    \"url\": \"http://localhost:4000/webhook\",\n    \"secret\": \"SOME_SECRET\"\n}\n</code></pre> Body parameter Description url <code>Required</code>  The address of the webhook to which user messages will be sent. Requests will come with a POST method and JSON body with a message as described here. secret <code>Optional</code>  Random data, in order to be able to verify that queries are coming from the correct source."},{"location":"api/bot/#get-bot-webhook","title":"Get bot webhook","text":"<p>Get webhook info for current bot:</p> <pre><code>GET /v1/bot-api/bot/webhook\n</code></pre> <p>Response:</p> <pre><code>{\n    \"botId\": \"01hc76p6ma76qfrs0bfr5x2pry\",\n    \"url\": \"http://localhost:4000/webhook\",\n    \"secret\": \"SOME_SECRET\"\n}\n</code></pre>"},{"location":"api/bot/#delete-bot-webhook","title":"Delete bot webhook","text":"<p>Remove the webhook for the current bot:</p> <pre><code>DELETE /v1/bot-api/bot/webhook\n</code></pre>"},{"location":"api/bot/#get-chats","title":"Get chats","text":"<p>Bots can only receive a list of available chat rooms by user:</p> <pre><code>GET /v1/bot-api/chats\n</code></pre> Query parameter Description user_id <code>Required</code>  Unique user identifier. <p>Returned response:</p> <pre><code>[\n    {\n        \"id\": \"01hc7aa947s4fdwywwjqr14wh7\",\n        \"userId\": \"01hc71yz5pny5bmf0b4055zbjw\",\n        \"botId\": \"01hc76p6ma76qfrs0bfr5x2pry\"\n    }\n]\n</code></pre>"},{"location":"api/bot/#send-message","title":"Send message","text":"<p>To send a message from a bot, use this request with a JSON body:</p> <pre><code>POST /v1/bot-api/chat/message\n</code></pre> <pre><code>{\n    \"chatId\": \"01hc7aa947s4fdwywwjqr14wh7\",\n    \"body\": \"Hello World!\",\n    \"attachmentIds\": []\n}\n</code></pre> Body parameter Description chatId <code>Required</code>  The unique ID of the chat to which the message is sent. body <code>Required</code>  The text body of the message. attachmentIds <code>Optional</code>  Array of unique identifiers for files to be attached to the current message. <p>Returned response:</p> <pre><code>{\n    \"id\": \"01hc7akt8z3w2a5ayfcrvkfy52\",\n    \"chatId\": \"01hc7aa947s4fdwywwjqr14wh7\",\n    \"senderId\": \"01hc76p6ma76qfrs0bfr5x2pry\",\n    \"body\": \"Hello World!\",\n    \"timestamp\": 1696758098208\n}\n</code></pre>"},{"location":"api/bot/#get-messages","title":"Get messages","text":"<p>To get a list of messages from the chat, use the following request:</p> <pre><code>GET /v1/bot-api/chat/:id/messages\n</code></pre> Query parameter Description page <code>Optional</code>  Message page number. Default is 1. limit <code>Optional</code>  Maximum number of messages per page. Default is 20. sender_id <code>Optional</code>  Filter messages by the ID of the specified sender. For example, you can filter messages to get only user messages, ignoring bot messages. since <code>Optional</code>  The timestamp (in milliseconds) from which you want to search for messages. <p>Returned response will be like this:</p> <pre><code>{\n    \"chatId\": \"01hc7aa947s4fdwywwjqr14wh7\",\n    \"total\": 1,\n    \"page\": 1,\n    \"limit\": 20,\n    \"messages\": [\n        {\n            \"id\": \"01hc7akt8z3w2a5ayfcrvkfy52\",\n            \"chatId\": \"01hc7aa947s4fdwywwjqr14wh7\",\n            \"senderId\": \"01hc76p6ma76qfrs0bfr5x2pry\",\n            \"body\": \"Hello World!\",\n            \"timestamp\": 1696758098208\n        }\n    ]\n}\n</code></pre> <p>The <code>total</code> field is an indicator of the number of all messages found.</p>"},{"location":"api/bot/#get-message","title":"Get message","text":"<p>Get message by their unique indenifier:</p> <pre><code>GET /v1/bot-api/chat/message/:id\n</code></pre> <p>Response:</p> <pre><code>{\n    \"id\": \"01hc7akt8z3w2a5ayfcrvkfy52\",\n    \"chatId\": \"01hc7aa947s4fdwywwjqr14wh7\",\n    \"senderId\": \"01hc76p6ma76qfrs0bfr5x2pry\",\n    \"body\": \"Hello!\",\n    \"timestamp\": 1696758098208\n}\n</code></pre> <p>Bots can only view chat messages that are relevant to them.</p>"},{"location":"api/bot/#upload-files","title":"Upload files","text":"<p>To upload files use this request:</p> <pre><code>POST /v1/bot-api/files\n</code></pre> <p>with form data as a body:</p> <pre><code>Content-Disposition: form-data; name=\"file\"; filename=\"yourfile.png\"\nContent-Type: image/png\n# Content...\n</code></pre> <p>The parameter <code>name</code> is always should be equals to file.</p> <p>Returned response will be like this:</p> <pre><code>[\n    {\n        \"id\": \"01hc79xqtqhd4jtzceyxstxgh7\",\n        \"path\": \"static/images/01hc79xqtqhd4jtzceyvpr7sk0.png\",\n        \"name\": \"yourfile.png\",\n        \"size\": 25908,\n        \"mimeType\": \"image/png\"\n    }\n]\n</code></pre> <ul> <li>id - Unique file identifier. It can be used as attachment for messages in <code>attachmentIds</code> field.</li> <li>path - The path to the file. Use the platform <code>hostname</code> + <code>/</code> + <code>path</code> to get the full URL.</li> </ul>"},{"location":"api/client/","title":"Client API","text":"<p>The requests described in this section can be used to build client applications. Currently this API is used in the official web-client of the platform.</p>"},{"location":"api/client/#get-service-info","title":"Get service info","text":"<p>Get service info defined in config file:</p> <pre><code>GET /v1/client-api/service-info\n</code></pre> <p>Response:</p> <pre><code>{\n    \"name\": \"Service name\",\n    \"description\": \"Some info about your service.\",\n    \"socials\": [\n        {\n            \"title\": \"Website\",\n            \"url\": \"https://example.com\"\n        },\n        {\n            \"title\": \"GitHub\",\n            \"url\": \"https://github.com\"\n        },\n        {\n            \"title\": \"Discord\",\n            \"url\": \"https://discord.com\"\n        },\n        {\n            \"title\": \"Twitter\",\n            \"url\": \"https://twitter.com\"\n        }\n    ]\n}\n</code></pre>"},{"location":"api/client/#get-all-bots","title":"Get all bots","text":"<p>Get a list of all available bots on the current server:</p> <pre><code>GET /v1/client-api/bots\n</code></pre> <p>Response:</p> <pre><code>[\n    {\n        \"id\": \"01hc76p6ma76qfrs0bfr5x2pry\",\n        \"name\": \"Test bot\",\n        \"description\": \"Just testing bot.\",\n        \"avatar\": \"https://google.com/img.png\"\n    }\n]\n</code></pre>"},{"location":"api/client/#get-bot","title":"Get bot","text":"<p>Get a single bot by its ID:</p> <pre><code>GET /v1/client-api/bot/:id\n</code></pre> <p>Response:</p> <pre><code>{\n    \"id\": \"01hc76p6ma76qfrs0bfr5x2pry\",\n    \"name\": \"Test bot\",\n    \"description\": \"Just testing bot.\",\n    \"avatar\": \"https://google.com/img.png\"\n}\n</code></pre>"},{"location":"api/client/#create-user-login","title":"Create user (login)","text":"<p>Use this request with a JSON body to create a new user:</p> <pre><code>POST /v1/client-api/user\n</code></pre> <pre><code>{\n    \"nickname\": \"user\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n    \"id\": \"01hc71yz5pny5bmf0b4055zbjw\",\n    \"nickname\": \"user\"\n}\n</code></pre> <p>\u26a0\ufe0f After executing this request, a response with cookies will be returned in which a JWT token with information about the current user will be sewn. All the requests listed below should be executed only with cookies setted.</p> <p>The lifetime of token is defined in config file. If the user does not use the platform for more than this time, cookies will not be able to be updated, which will cause the token to become obsolete. Therefore, the user will lose the ability to view his past data and he will have to use this request again.</p>"},{"location":"api/client/#get-current-user","title":"Get current user","text":"<p>Authorised users can perform the following request:</p> <pre><code>GET /v1/client-api/user\n</code></pre> <p>Response:</p> <pre><code>{\n    \"id\": \"01hc71yz5pny5bmf0b4055zbjw\",\n    \"nickname\": \"user\"\n}\n</code></pre>"},{"location":"api/client/#get-bot-commands","title":"Get bot commands","text":"<p>Get a list of available commands of the specified bot:</p> <pre><code>GET /v1/client-api/bot/:id/commands\n</code></pre> <p>Response will be like this:</p> <pre><code>[\n    {\n        \"id\": \"01hcjd34adz1va07vk97jfjmgq\",\n        \"alias\": \"start\",\n        \"description\": \"Start a new conversation.\"\n    },\n    {\n        \"id\": \"01hcjd34adz1va07vk99w3hzk3\",\n        \"alias\": \"help\",\n        \"description\": \"Show usage guide.\"\n    }\n]\n</code></pre>"},{"location":"api/client/#create-chat","title":"Create chat","text":"<p>Users can create chats to communicate with bots. It only requires the ID of a specific bot:</p> <pre><code>POST /v1/client-api/chat\n</code></pre> <pre><code>{\n    \"botId\": \"01hc76p6ma76qfrs0bfr5x2pry\"\n}\n</code></pre> <p>Returned response:</p> <pre><code>{\n    \"id\": \"01hc7aa947s4fdwywwjqr14wh7\",\n    \"userId\": \"01hc71yz5pny5bmf0b4055zbjw\",\n    \"botId\": \"01hc76p6ma76qfrs0bfr5x2pry\"\n}\n</code></pre>"},{"location":"api/client/#get-chats","title":"Get chats","text":"<p>To get a list of all created chats with a particular bot, use the following request:</p> <pre><code>GET /v1/client-api/chats\n</code></pre> Query parameter Description bot_id <code>Required</code>  Unique bot identifier. <p>Returned response:</p> <pre><code>[\n    {\n        \"id\": \"01hc7aa947s4fdwywwjqr14wh7\",\n        \"userId\": \"01hc71yz5pny5bmf0b4055zbjw\",\n        \"botId\": \"01hc76p6ma76qfrs0bfr5x2pry\"\n    },\n    {\n        \"id\": \"01hc7aa947s4fdwyww29pny5bm\",\n        \"userId\": \"01hc71yz5pny5bmf0b4055zbjw\",\n        \"botId\": \"01hc76p6ma76qfrs0bfr5x2pry\"\n    }\n]\n</code></pre>"},{"location":"api/client/#delete-chat","title":"Delete chat","text":"<p>You can delete a chat by its ID:</p> <pre><code>DELETE /v1/client-api/chat/:id\n</code></pre>"},{"location":"api/client/#send-message","title":"Send message","text":"<p>To send a message to the bot use the following request with JSON body:</p> <pre><code>POST /v1/client-api/chat/message\n</code></pre> <pre><code>{\n    \"chatId\": \"01hc7aa947s4fdwywwjqr14wh7\",\n    \"body\": \"Hello World!\",\n    \"attachmentIds\": []\n}\n</code></pre> Body parameter Description chatId <code>Required</code>  The unique ID of the chat to which the message is sent. body <code>Required</code>  The text body of the message. attachmentIds <code>Optional</code>  Array of unique identifiers for files to be attached to the current message. <p>Returned response:</p> <pre><code>{\n    \"id\": \"01hc7akt8z3w2a5ayfcrvkfy52\",\n    \"chatId\": \"01hc7aa947s4fdwywwjqr14wh7\",\n    \"senderId\": \"01hc71yz5pny5bmf0b4055zbjw\",\n    \"body\": \"Hello World!\",\n    \"timestamp\": 1696758105336\n}\n</code></pre>"},{"location":"api/client/#get-messages","title":"Get messages","text":"<p>To get a list of messages from the chat, use the following request:</p> <pre><code>GET /v1/client-api/chat/:id/messages\n</code></pre> Query parameter Description page <code>Optional</code>  Message page number. Default is 1. limit <code>Optional</code>  Maximum number of messages per page. Default is 20. sender_id <code>Optional</code>  Filter messages by the ID of the specified sender. For example, you can filter messages to get only bot messages, ignoring user messages. since <code>Optional</code>  The timestamp (in milliseconds) from which you want to search for messages. <p>Returned response will be like this:</p> <pre><code>{\n    \"chatId\": \"01hc7aa947s4fdwywwjqr14wh7\",\n    \"total\": 1,\n    \"page\": 1,\n    \"limit\": 20,\n    \"messages\": [\n        {\n            \"id\": \"01hc7akt8z3w2a5ayfcrvkfy52\",\n            \"chatId\": \"01hc7aa947s4fdwywwjqr14wh7\",\n            \"senderId\": \"01hc71yz5pny5bmf0b4055zbjw\",\n            \"body\": \"Hello World!\",\n            \"timestamp\": 1696758105336\n        }\n    ]\n}\n</code></pre> <p>The <code>total</code> field is an indicator of the number of all messages found.</p>"},{"location":"api/client/#upload-files","title":"Upload files","text":"<p>To upload files use this request:</p> <pre><code>POST /v1/client-api/files\n</code></pre> <p>with form data as a body:</p> <pre><code>Content-Disposition: form-data; name=\"file\"; filename=\"yourfile.png\"\nContent-Type: image/png\n# Content...\n</code></pre> <p>The parameter <code>name</code> is always should be equals to file.</p> <p>Returned response will be like this:</p> <pre><code>[\n    {\n        \"id\": \"01hc79xqtqhd4jtzceyxstxgh7\",\n        \"path\": \"static/images/01hc79xqtqhd4jtzceyvpr7sk0.png\",\n        \"name\": \"yourfile.png\",\n        \"size\": 25908,\n        \"mimeType\": \"image/png\"\n    }\n]\n</code></pre> <ul> <li>id - Unique file identifier. It can be used as attachment for messages in <code>attachmentIds</code> field.</li> <li>path - The path to the file. Use the platform <code>hostname</code> + <code>/</code> + <code>path</code> to get the full URL.</li> </ul>"},{"location":"guides/golang/","title":"Working with Go","text":"<p>This guide shows an example of developing a simple bot in Go using only the standard library of the language.</p>"},{"location":"guides/golang/#writting-code","title":"Writting code","text":"<p>First, let's import some packages and define the necessary constants:</p> <pre><code>package main\n\nimport (\n    \"bytes\"\n    \"encoding/json\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nconst port = \"4000\"\nconst botApi = \"http://localhost:7007/v1/bot-api\"\nconst botKey = \"PASTE_BOT_KEY_HERE\"\n</code></pre> <p>Let's define a structure for the message type to encode and decode JSON correctly:</p> <pre><code>type Message struct {\n    Id            string   `json:\"id,omitempty\"`\n    ChatId        string   `json:\"chatId\"`\n    SenderId      string   `json:\"senderId,omitempty\"`\n    Body          string   `json:\"body\"`\n    AttachmentIds []string `json:\"attachmentIds,omitempty\"`\n    Timestamp     int64    `json:\"timestamp,omitempty\"`\n}\n</code></pre> <p>Next, let's write a function to send messages to the server on behalf of the bot:</p> <pre><code>func sendMessage(chatId, body string) {\n    jsonBody, err := json.Marshal(&amp;Message{\n        ChatId: chatId,\n        Body:   body,\n    })\n    if err != nil {\n        fmt.Printf(\"can't marshal json %s\\n\", err.Error())\n    }\n\n    req, err := http.NewRequest(\n        http.MethodPost,\n        botApi+\"/chat/message\",\n        bytes.NewBuffer(jsonBody),\n    )\n    if err != nil {\n        fmt.Printf(\"can't make a new request %s\\n\", err.Error())\n    }\n\n    req.Header.Add(\"Content-Type\", \"application/json\")\n    req.Header.Add(\"Authorization\", botKey)\n\n    resp, err := http.DefaultClient.Do(req)\n    if err != nil {\n        fmt.Printf(\"can't send message to user %s\\n\", err.Error())\n    }\n    defer resp.Body.Close()\n\n    if resp.StatusCode &gt;= 400 {\n        fmt.Printf(\"got response with error code: %d\\n\", resp.StatusCode)\n    }\n}\n</code></pre> <p>Now let's write a custom handler for user messages, with some simple logic:</p> <pre><code>func messageHandler(msg Message) {\n    reply := \"\"\n\n    switch msg.Body {\n    case \"/start\":\n        reply = \"Hello!\\n\\nLet's play with me using /ping command.\"\n    case \"/ping\":\n        reply = \"PONG\"\n    default:\n        reply = \"Sorry, but I don't understand you.\"\n    }\n\n    sendMessage(msg.ChatId, reply)\n}\n</code></pre> <p>Let's create an HTTP handler for the webhook to receive messages from users and pass them to the handler described above:</p> <pre><code>func webhookHandler(w http.ResponseWriter, r *http.Request) {\n    // Accept only POST requests on /webhook path\n    if r.Method != http.MethodPost {\n        w.WriteHeader(http.StatusNotFound)\n        return\n    }\n\n    var msg Message\n\n    err := json.NewDecoder(r.Body).Decode(&amp;msg)\n    if err != nil {\n        w.WriteHeader(http.StatusBadRequest)\n        return\n    }\n\n    // Handling a user message in a separate goroutine\n    go messageHandler(msg)\n\n    w.WriteHeader(http.StatusOK)\n}\n</code></pre> <p>Finally, let's declare the main function, which will be the entry point of our bot, where the HTTP server will be started:</p> <pre><code>func main() {\n    http.HandleFunc(\"/webhook\", webhookHandler)\n\n    fmt.Println(\"Bot is running...\")\n    log.Fatal(http.ListenAndServe(\":\"+port, nil))\n}\n</code></pre> <p>To start our bot, run this command:</p> <pre><code>go run main.go\n</code></pre>"},{"location":"guides/golang/#webhook-setup","title":"Webhook setup","text":"<p>To start receiving messages from users, you need to connect a webhook for our bot. We have launched the bot on a local network on a port 4000, so our webhook will look like this:</p> <pre><code>curl --request POST \\\n  --url http://localhost:7007/v1/bot-api/bot/webhook \\\n  --header 'Authorization: PASTE_BOT_TOKEN_HERE' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"url\": \"http://localhost:4000/webhook\"}'\n</code></pre> <p>Note that if you running Botyard using Docker, accessing to localhost from the container will not work. Watch this video to solve the problem.</p> <p>See the full bot API reference.</p>"},{"location":"guides/nodejs/","title":"Working with Node.js","text":"<p>Node.js is a great choice for bot development. It is able to handle a huge number of requests thanks to an asynchronous behavior model. In the current guide, an example of creating a simple bot using only the capabilities of the standard library.</p>"},{"location":"guides/nodejs/#preparations","title":"Preparations","text":"<ol> <li> <p>Start with a new folder:</p> <pre><code>mkdir ping-pong-bot\n</code></pre> <pre><code>cd ./ping-pong-bot\n</code></pre> </li> <li> <p>Init a new project:</p> <pre><code>npm init -y\n</code></pre> </li> <li> <p>Create the main project file:</p> <pre><code>touch main.js\n</code></pre> </li> </ol>"},{"location":"guides/nodejs/#writting-code","title":"Writting code","text":"<p>First, let's import some modules and define the necessary constants:</p> <pre><code>import http from \"node:http\";\n\nconst PORT = \"4000\";\nconst BOT_API = \"http://localhost:7007/v1/bot-api\";\nconst BOT_KEY = \"PASTE_BOT_KEY_HERE\";\n</code></pre> <p>To send messages to users, you need to create an appropriate function:</p> <pre><code>const sendMessage = async (chatId, body) =&gt; {\n    try {\n        const jsonBody = JSON.stringify({ chatId, body });\n\n        const resp = await fetch(`${BOT_API}/chat/message`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: BOT_KEY,\n            },\n            body: jsonBody,\n        });\n\n        if (resp.status &gt;= 400) {\n            console.error(`Got response with error code: ${resp.status}`);\n        }\n    } catch (error) {\n        throw error;\n    }\n};\n</code></pre> <p>Next let's implement a custom message handler. This is the place where all the logic of your bot's work is performed:</p> <pre><code>const messageHandler = async (userMsg) =&gt; {\n    try {\n        let reply = \"\";\n\n        switch (userMsg.body) {\n            case \"/start\":\n                reply = \"Hello!\\n\\nLet's play with me using /ping command.\";\n                break;\n            case \"/ping\":\n                reply = `PONG`;\n                break;\n\n            default:\n                reply = \"Sorry, but I don't understand you.\";\n                break;\n        }\n\n        // Send response to user\n        await sendMessage(userMsg.chatId, reply);\n    } catch (error) {\n        console.error(`Message handling failed: ${String(error)}`);\n    }\n};\n</code></pre> <p>Then, let's declare a handler for the webhook to receive messages from users:</p> <pre><code>const webhookHandler = async (req, res) =&gt; {\n    try {\n        // Accept only POST requests on /webhook path\n        if (!req.method === \"POST\" &amp;&amp; !req.url === \"/webhook\") {\n            res.writeHead(404);\n            res.end();\n            return;\n        }\n\n        // Read request body -----------------------------------\n        let body = \"\";\n        req.on(\"data\", (chunk) =&gt; (body += chunk));\n        await new Promise((resolve) =&gt; req.on(\"end\", resolve));\n        // -----------------------------------------------------\n\n        const message = JSON.parse(body);\n\n        res.writeHead(200);\n        res.end();\n\n        // Handling user messages\n        messageHandler(message);\n    } catch (error) {\n        res.writeHead(400, { \"Content-Type\": \"application/json\" });\n        res.end(JSON.stringify({ error: String(error) }));\n    }\n};\n</code></pre> <p>And finally, we will create an entry point for our bot, where the HTTP server will be started:</p> <pre><code>const main = async () =&gt; {\n    try {\n        const server = new http.Server(webhookHandler);\n        server.listen(PORT, () =&gt; console.log(\"Bot is running...\"));\n    } catch (error) {\n        console.error(error);\n        process.exit(1);\n    }\n};\n\nmain();\n</code></pre> <p>To start our bot, run this command:</p> <pre><code>node main.js\n</code></pre>"},{"location":"guides/nodejs/#webhook-setup","title":"Webhook setup","text":"<p>To start receiving messages from users, you need to connect a webhook for our bot. We have launched the bot on a local network on a port 4000, so our webhook will look like this:</p> <pre><code>curl --request POST \\\n  --url http://localhost:7007/v1/bot-api/bot/webhook \\\n  --header 'Authorization: PASTE_BOT_TOKEN_HERE' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"url\": \"http://localhost:4000/webhook\"}'\n</code></pre> <p>Note that if you running Botyard using Docker, accessing to localhost from the container will not work. Watch this video to solve the problem.</p> <p>See the full bot API reference.</p>"},{"location":"guides/python/","title":"Working with Python","text":"<p>This guide shows an example of developing a simple bot in Python using only the standard library of the language.</p>"},{"location":"guides/python/#writting-code","title":"Writting code","text":"<p>First, let's import some modules and define the necessary constants:</p> <pre><code>import json\nimport threading\nimport http.server\nimport socketserver\n\nport = 4000\napi_server = \"localhost:7007\"\nbot_key = \"PASTE_BOT_KEY_HERE\"\n</code></pre> <p>Next, let's write a function to send messages to the server on behalf of the bot:</p> <pre><code>def send_message(chat_id, body):\n    json_body = json.dumps({'chatId': chat_id, 'body': body})\n\n    conn = http.client.HTTPConnection(api_server)\n    conn.request(\"POST\", \"/v1/bot-api/chat/message\", body=json_body, headers={\n        'Content-Type': 'application/json',\n        'Authorization': bot_key\n    })\n\n    response = conn.getresponse()\n    if response.status &gt;= 400:\n        print(f'Get response with error: {response.status}, {response.reason}')\n</code></pre> <p>Now let's write a custom handler for user messages, with some simple logic:</p> <pre><code>def message_handler(msg):\n    reply = \"\"\n\n    if msg['body'] == \"/start\":\n        reply = \"Hello!\\n\\nLet's play with me using /ping command.\"\n    elif msg['body'] == \"/ping\":\n        reply = \"PONG\"\n    else:\n        reply = \"Sorry, but I don't understand you.\"\n\n    # Send response to the user\n    send_message(msg['chatId'], reply)\n</code></pre> <p>Let's create an HTTP handler for the webhook to receive messages from users and pass them to the handler described above:</p> <pre><code>class CustomHandler(http.server.SimpleHTTPRequestHandler):\n    def do_POST(self):\n        if self.path == '/webhook':\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            try:\n                message = json.loads(post_data.decode('utf-8'))\n                self.send_response(200)\n                self.end_headers()\n\n                # Handling message in other thread\n                async_thread = threading.Thread(\n                    target=message_handler,\n                    args=([message])\n                )\n                async_thread.start()\n            except ValueError:\n                self.send_response(400)\n                self.end_headers()\n        else:\n            self.send_response(404)\n            self.end_headers()\n</code></pre> <p>And finally, let's get our bot up and running:</p> <pre><code>with socketserver.TCPServer((\"\", port), CustomHandler) as httpd:\n    print(\"Bot is running...\")\n    httpd.serve_forever()\n</code></pre> <p>To start our bot, run this command:</p> <pre><code>python3 main.py\n</code></pre>"},{"location":"guides/python/#webhook-setup","title":"Webhook setup","text":"<p>To start receiving messages from users, you need to connect a webhook for our bot. We have launched the bot on a local network on a port 4000, so our webhook will look like this:</p> <pre><code>curl --request POST \\\n  --url http://localhost:7007/v1/bot-api/bot/webhook \\\n  --header 'Authorization: PASTE_BOT_TOKEN_HERE' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"url\": \"http://localhost:4000/webhook\"}'\n</code></pre> <p>Note that if you running Botyard using Docker, accessing to localhost from the container will not work. Watch this video to solve the problem.</p> <p>See the full bot API reference.</p>"}]}